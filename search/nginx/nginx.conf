# SEARCH_APP NGINX_CONFIG_FILE

resolver 127.0.0.1 [::];

upstream backend_gatekeeper {
  hash $remote_addr$remote_port consistent;

  server gatekeeper:4000;    
}

upstream backend_keycloak {
  hash $remote_addr$remote_port consistent;

  server keycloak:8080;    
}

upstream backend_source_manager {
  hash $remote_addr$remote_port consistent;
  
  server source-manager:5000;    
}

upstream backend_search {
  hash $remote_addr$remote_port consistent;

  server search-api:9001;
}

upstream login_app {
  hash $remote_addr$remote_port consistent;

  server login:8080;
}


server {
  include    /etc/nginx/mime.types;
  listen 3000;
  listen [::]:3000;
  server_name _;  
  
  proxy_set_header    Host               $host;
  proxy_set_header    X-Real-IP          $remote_addr;
  proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header    X-Forwarded-Host   $host;
  proxy_set_header    X-Forwarded-Server $host;
  proxy_set_header    X-Forwarded-Port   $server_port;
  proxy_set_header    X-Forwarded-Proto  $scheme;

  access_log    /var/log/nginx/host.access.log;
  error_log /var/log/nginx/host.error.log;

  root   /usr/share/nginx/html;
  index  index.html index.htm;

  location /gatekeeper/ {
     proxy_pass http://backend_gatekeeper/;

  }

  location /keycloak/ {
      proxy_pass http://backend_keycloak/;
  }

  location /keycloak/auth/ {
      proxy_pass http://backend_keycloak/keycloak/auth/;
  }

  location /search-api/ {
    proxy_pass http://backend_search;
  }

  location /login_app/ {
    proxy_pass http://login_app;
  }

  location /source-manager/ {
     proxy_pass http://backend_source_manager/;

     proxy_set_header Host $host;
     proxy_set_header X-Real-IP $remote_addr;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header X-Forwarded-Proto $scheme;
  }

  location / {

      # if ($arg_token ~ "^$") { return 404; }
    
      # set $token $arg_token;
      # set $args "";

      # IMPORTANT, this is required when using dynamic proxy pass
      # You can alternatively use any DNS resolver under your control
      # resolver 8.8.8.8;

      # proxy_pass $url;
      # proxy_set_header Authorization "Bearer $token";
      # proxy_redirect off;

      root /usr/share/nginx/html;
      index index.html;
      autoindex on;
      set $fallback_file /index.html;
      if ($http_accept !~ text/html) {
          set $fallback_file /null;
      }
      if ($uri ~ /$) {
          set $fallback_file /null;
      }
      try_files $uri $fallback_file;

      if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin: $http_origin');
          add_header 'Access-Control-Allow-Origin: GET, POST, DELETE, PUT, PATCH, OPTIONS');
          add_header 'Access-Control-Allow-Credentials: true');
          add_header 'Vary: Origin');

      }

       add_header 'Access-Control-Allow-Origin' "$http_origin" always;
       add_header 'Access-Control-Allow-Credentials' 'true' always;
       add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
       add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}